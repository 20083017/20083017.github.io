<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BY Blog</title>
    <description>Every failure is leading towards success.</description>
    <link>http://20083017.github.io/</link>
    <atom:link href="http://20083017.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 01 Sep 2022 23:36:10 +0800</pubDate>
    <lastBuildDate>Thu, 01 Sep 2022 23:36:10 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Git指令整理</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;随便整理的一些自用的Git指令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;github创建仓库提示代码&quot;&gt;GitHub创建仓库提示代码&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;# 项目名&quot; &amp;gt;&amp;gt; README.md
git init
git add README.md
git commit -m &quot;first commit&quot;
git remote add origin git@github.com:qiubaiying/项目名.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若仓库存在直接push&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin git@github.com:qiubaiying/test.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;常用操作&quot;&gt;常用操作&lt;/h1&gt;

&lt;h4 id=&quot;创建仓库初始化&quot;&gt;创建仓库（初始化）&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在当前指定目录下创建
git init

新建一个仓库目录
git init [project-name]

克隆一个远程项目
git clone [url]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;添加文件到缓存区&quot;&gt;添加文件到缓存区&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;添加所有变化的文件
 	git add .

添加名称指定文件
git add text.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;配置&quot;&gt;配置&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;设置提交代码时的用户信息
git config [--global] user.name &quot;[name]&quot;
git config [--global] user.email &quot;[email address]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;提交&quot;&gt;提交&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;提交暂存区到仓库区
git commit -m &quot;msg&quot;

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;远程同步&quot;&gt;远程同步&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;分支&quot;&gt;分支&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;标签tags&quot;&gt;标签Tags&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;添加标签 在当前commit
git tag -a v1.0 -m &#39;xxx&#39; 

添加标签 在指定commit
git tag v1.0 [commit]

查看
git tag

删除
git tag -d V1.0

删除远程tag
git push origin :refs/tags/[tagName]

推送
git push origin --tags

拉取
git fetch origin tag V1.0

新建一个分支，指向某个tag
git checkout -b [branch] [tag]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;查看信息&quot;&gt;查看信息&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;撤销&quot;&gt;撤销&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 生成一个可供发布的压缩包
$ git archives
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 15 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://20083017.github.io/2017/02/15/Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</link>
        <guid isPermaLink="true">http://20083017.github.io/2017/02/15/Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</guid>
        
        <category>Mac</category>
        
        <category>终端</category>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>随便聊聊</title>
        <description>&lt;h1 id=&quot;随便谈谈&quot;&gt;随便谈谈&lt;/h1&gt;

&lt;p&gt;今天是情人节，首先祝大家情人节快乐~&lt;/p&gt;

&lt;p&gt;在这特殊的节&lt;strong&gt;日&lt;/strong&gt;里，我特意花了半天的时间，我将在简书中的文章都搬到 &lt;a href=&quot;http://qiubaiying.github.io&quot;&gt;&lt;strong&gt;BY Blog&lt;/strong&gt;&lt;/a&gt; 上，顺便又修改了下博客框架。&lt;/p&gt;

&lt;h1 id=&quot;关于分享&quot;&gt;关于分享&lt;/h1&gt;

&lt;p&gt;最近有很多人来请教我关于建站的问题，我都花时间为其解答一一解答。&lt;/p&gt;

&lt;p&gt;感觉在解答别人的问题时，你自己也能学到很多新的知识，同时能沉浸其中。&lt;/p&gt;

&lt;p&gt;我想这就是分享的魔力吧。&lt;/p&gt;

&lt;p&gt;所以，把问题都砸过来吧~&lt;/p&gt;

</description>
        <pubDate>Tue, 14 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://20083017.github.io/2017/02/14/%E9%9A%8F%E4%BE%BF%E8%81%8A%E8%81%8A/</link>
        <guid isPermaLink="true">http://20083017.github.io/2017/02/14/%E9%9A%8F%E4%BE%BF%E8%81%8A%E8%81%8A/</guid>
        
        <category>生活</category>
        
        <category>博客</category>
        
        <category>漫谈</category>
        
        
      </item>
    
      <item>
        <title>快速搭建个人博客</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;正所谓前人栽树，后人乘凉。&lt;/p&gt;

  &lt;p&gt;感谢&lt;a href=&quot;https://github.com/huxpro&quot;&gt;Huxpro&lt;/a&gt;提供的博客模板&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://qiubaiying.top&quot;&gt;我的的博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;从 Jekyll 到 GitHub Pages 中间踩了许多坑，终于把我的个人博客&lt;a href=&quot;http://qiubaiying.top&quot;&gt;BY Blog&lt;/a&gt;搭建出来了。。。&lt;/p&gt;

&lt;p&gt;本教程针对的是不懂技术又想搭建个人博客的小白，操作简单暴力且快速。当然懂技术那就更好了。&lt;/p&gt;

&lt;p&gt;看看看博客的主页样式：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://qiubaiying.github.io/&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-51a2fe6fbe24d1cd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在手机上的布局：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://qiubaiying.github.io/&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-d58bb45f9faedb70.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;废话不多说了，开始进入正文。&lt;/p&gt;

&lt;h1 id=&quot;快速开始&quot;&gt;快速开始&lt;/h1&gt;

&lt;h3 id=&quot;从注册一个github账号开始&quot;&gt;从注册一个Github账号开始&lt;/h3&gt;

&lt;p&gt;我采用的搭建博客的方式是使用 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyll.com.cn/&quot;&gt;jekyll&lt;/a&gt; 的方式。&lt;/p&gt;

&lt;p&gt;要使用 GitHub Pages，首先你要注册一个&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;账号，GitHub 是全球最大的同性交友网站(吐槽下程序员~)，你值得拥有。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-e65e5cda50f38cef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;拉取我的博客模板&quot;&gt;拉取我的博客模板&lt;/h3&gt;

&lt;p&gt;注册完成后搜索 &lt;code class=&quot;highlighter-rouge&quot;&gt;qiubaiying.github.io&lt;/code&gt; 进入&lt;a href=&quot;https://github.com/qiubaiying/qiubaiying.github.io&quot;&gt;我的仓库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-1b234fb8549e58aa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击右上角的 &lt;strong&gt;Fork&lt;/strong&gt; 将我的仓库拉倒你的账号下&lt;/p&gt;

&lt;p&gt;稍等一下，点击刷新，你会看到&lt;strong&gt;Fork&lt;/strong&gt;了成功的页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-b2347768a1f2d993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;修改仓库名&quot;&gt;修改仓库名&lt;/h3&gt;

&lt;p&gt;点击&lt;strong&gt;settings&lt;/strong&gt;进入设置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-f47b7e4802de6a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p id=&quot;Rename&quot;&gt;&lt;/p&gt;
&lt;p&gt;修改仓库名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;你的Github账号名.github.io&lt;/code&gt;，然后 Rename&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-ca3d843e526cdd5b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时你在在浏览器中输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;你的Github账号名.github.io&lt;/code&gt; 例如:&lt;code class=&quot;highlighter-rouge&quot;&gt;baiyingqiu.github.io&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;你将会看到如下界面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-96b5db55df9db422.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说明已经成功一半了😀。。。当然，还需要修改博客的配置才能变成你的博客。&lt;/p&gt;

&lt;p&gt;若是出现&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-cfd55a22902a9d2c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;则需要 &lt;a href=&quot;#Rename&quot;&gt;检查一下你的仓库名是否正确&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;整个网站结构&quot;&gt;整个网站结构&lt;/h3&gt;

&lt;p&gt;修改Blog前我们来看看Jekyll 网站的基础结构，当然我们的网站比这个复杂。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── _config.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.textile
|   └── on-simplicity-in-technology.markdown
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile
|   └── 2009-04-26-barcamp-boston-4-roundup.textile
├── _data
|   └── members.yml
├── _site
├── img
└── index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;很复杂看不懂是不是，不要紧，你只要记住其中几个OK了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 全局配置文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;	放置博客文章的文件夹&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt;	存放图片的文件夹&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他的想继续深究可以&lt;a href=&quot;http://jekyll.com.cn/docs/structure/&quot;&gt;看这里&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;修改博客配置&quot;&gt;修改博客配置&lt;/h3&gt;

&lt;p&gt;来到你的仓库，找到&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;文件,这是网站的全局配置文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-c23d4a5d67c88084.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击修改&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-b37268df7a7852ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;的内容&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0c8750f5a18dbe03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来我们来详细说说以下配置文件的内容：&lt;/p&gt;

&lt;h4 id=&quot;基础设置&quot;&gt;基础设置&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site settings
title: You Blog    				  	#你博客的标题
SEOTitle: 你的博客 | You Blog    	 #显示在浏览器上搜索的时候显示的标题
header-img: img/post-bg-rwd.jpg  	#显示在首页的背景图片
email: You@gmail.com	
description: &quot;You Blog&quot;  			 #网站介绍
keyword: &quot;BY, BY Blog, 柏荧的博客, qiubaiying, 邱柏荧, iOS, Apple, iPhone&quot; #关键词
url: &quot;https://qiubaiying.github.io&quot;          # 这个就是填写你的博客地址
baseurl: &quot;&quot;      # 这个我们不用填写

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;侧边栏&quot;&gt;侧边栏&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Sidebar settings
sidebar: true                           # 是否开启侧边栏.
sidebar-about-description: &quot;说点装逼的话。。。&quot;
sidebar-avatar:/img/avatar-by.JPG      # 你的个人头像 这里你可以改成我在img文件夹中的两张备用照片 img/avatar-m 或 avatar-g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;社交账号&quot;&gt;社交账号&lt;/h4&gt;
&lt;p&gt;展示你的其他社交平台&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-ec775a22f76e2f40.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下面你的社交账号的用户名就可以了，若没有可不用填&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# SNS settings
RSS: false
weibo_username:     username
zhihu_username:     username
github_username:    username
facebook_username:  username
jianshu_username:	jianshu_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;新加入了&lt;strong&gt;简书&lt;/strong&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;jianshu_id&lt;/code&gt; 在你打开你的简书主页后的地址如：&lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.jianshu.com/u/e71990ada2fd&lt;/code&gt;中，后面这一串数字：&lt;code class=&quot;highlighter-rouge&quot;&gt;e71990ada2fd &lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;评论系统&quot;&gt;评论系统&lt;/h4&gt;

&lt;p&gt;博客中使用的是 &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; 评论系统，在 &lt;a href=&quot;https://disqus.com/&quot;&gt;官网&lt;/a&gt; 注册帐号后，按下面的步骤简单的配置即可：&lt;/p&gt;

&lt;p&gt;进入 &lt;a href=&quot;https://disqus.com/home/settings/profile/&quot;&gt;设置页面&lt;/a&gt; 配置个人信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-904ecb30c536c73b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;配置 Disqus 个人信息&quot; /&gt;&lt;/p&gt;

&lt;p&gt;找到 &lt;strong&gt;Username&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-19d1b9e7d2624bfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Disqus Account&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个 &lt;strong&gt;Username&lt;/strong&gt;  就是我们 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 中 &lt;code class=&quot;highlighter-rouge&quot;&gt;disqus_username&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Disqus settings（https://disqus.com/）
disqus_username: qiubaiying
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;很对人反映 Disqus 评论插件加载不出来，因为 Disqus 在国内加载缓慢，所以我新集成了 Gitalk 评论插件（感谢&lt;a href=&quot;https://github.com/FeDemo&quot;&gt;@FeDemo&lt;/a&gt;的推荐），喜欢折腾的朋友可以看这篇：&lt;a href=&quot;http://qiubaiying.top/2017/12/19/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/&quot;&gt;《为博客添加 Gitalk 评论插件》&lt;/a&gt;。 我已经在&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 配置就好了，只需要填写参数可以了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;网站统计&quot;&gt;网站统计&lt;/h4&gt;

&lt;p&gt;集成了 &lt;a href=&quot;http://tongji.baidu.com/web/welcome/login&quot;&gt;Baidu Analytics&lt;/a&gt; 和 &lt;a href=&quot;http://www.google.cn/analytics/&quot;&gt;Google Analytics&lt;/a&gt;，到各个网站注册拿到track_id替换下面的就可以了&lt;/p&gt;

&lt;p&gt;这是我的 Google Analytics&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-c36b895c53196fdb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不要使用我的track_id&lt;/strong&gt;😂。。。&lt;/p&gt;

&lt;p&gt;若不想启用统计，直接删除或注释掉就可以了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Analytics settings
# Baidu Analytics
ba_track_id: 83e259f69b37d02a4633a2b7d960139c

# Google Analytics
ga_track_id: &#39;UA-90855596-1&#39;            # Format: UA-xxxxxx-xx
ga_domain: auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;好友&quot;&gt;好友&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;friends: [
    {
        title: &quot;简书·BY&quot;,
        href: &quot;http://www.jianshu.com/u/e71990ada2fd&quot;
    },{
        title: &quot;Apple&quot;,
        href: &quot;https://apple.com&quot;
    },{
        title: &quot;Apple Developer&quot;,
        href: &quot;https://developer.apple.com/&quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;保存&quot;&gt;保存&lt;/h4&gt;
&lt;p&gt;讲网页拉倒底部，点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;Commit changes&lt;/code&gt; 提交保存&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0781006b5d15d149.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次进入你的主页，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-a49ee2975d524c93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;恭喜你，你的个人博客搭建完成了😀。&lt;/p&gt;

&lt;h1 id=&quot;写文章&quot;&gt;写文章&lt;/h1&gt;

&lt;p&gt;利用 Github网站 ，我们可以不用学习&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;，就可以轻松管理自己的博客&lt;/p&gt;

&lt;p&gt;对于轻车熟路的程序猿来说，使用git管理会更加方便。。。&lt;/p&gt;

&lt;h2 id=&quot;创建&quot;&gt;创建&lt;/h2&gt;
&lt;p&gt;文章统一放在网站根目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 的文件夹中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-fb74cdc11a950bd4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建一个文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-9a47b2074362e570.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下面写文章，和标题，还能实时预览，最后提交保存就能看到自己的新文章了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-88acd9e29fa3ae8a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;格式&quot;&gt;格式&lt;/h2&gt;
&lt;p&gt;每一篇文章文件命名采用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;2017-02-04-Hello-2017.md&lt;/code&gt;时间+标题的形式，空格用&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;替换连接。&lt;/p&gt;

&lt;p&gt;文件的格式是 &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; 的 &lt;a href=&quot;http://sspai.com/25137/&quot;&gt;&lt;strong&gt;MarkDown&lt;/strong&gt;&lt;/a&gt; 文件。&lt;/p&gt;

&lt;p&gt;我们的博客文章格式采用是 &lt;strong&gt;MarkDown&lt;/strong&gt;+ &lt;strong&gt;YAML&lt;/strong&gt; 的方式。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt&quot;&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/a&gt; 就是我们配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config&lt;/code&gt;文件用的语言。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sspai.com/25137/&quot;&gt;&lt;strong&gt;MarkDown&lt;/strong&gt;&lt;/a&gt; 是一种轻量级的「标记语言」，很简单。&lt;a href=&quot;http://sspai.com/25137&quot;&gt;花半个小时看一下&lt;/a&gt;就能熟练使用了&lt;/p&gt;

&lt;p&gt;大概就是这么一个结构。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout:     post   				    # 使用的布局（不需要改）
title:      My First Post 				# 标题 
subtitle:   Hello World, Hello Blog #副标题
date:       2017-02-06 				# 时间
author:     BY 						# 作者
header-img: img/post-bg-2015.jpg 	#这篇文章标题背景图片
catalog: true 						# 是否归档
tags:								#标签
    - 生活
---

## Hey
&amp;gt;这是我的第一篇博客。

进入你的博客主页，新的文章将会出现在你的主页上.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;按格式创建文章后，提交保存。进入你的博客主页，新的文章将会出现在你的主页上.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-f4d5bb65ae3abd00.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到这里，恭喜你！&lt;/p&gt;

&lt;p&gt;你已经成功搭建了自己的个人博客以及学会在博客上撰写文字的技能了（是不是有点小兴奋🙈）。&lt;/p&gt;

&lt;h4 id=&quot;首页标签&quot;&gt;首页标签&lt;/h4&gt;

&lt;p&gt;在首页可以看到这些特色标签，当你的文章出现相同标签（默认相同的&lt;strong&gt;标签数量大于1&lt;/strong&gt;），才会自动生成。&lt;/p&gt;

&lt;p&gt;所以当你只放一篇文章的时候是不会出现标签的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-9281b7176c456f92.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;建站的初期，博客比较少，若你想直接在首页生成比较多的标签。你可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;_congfig.yml&lt;/code&gt;中找到这段：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Featured Tags
featured-tags: true                     # 是否使用首页标签
featured-condition-size: 1              # 相同标签数量大于这个数，才会出现在首页
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将其修改为&lt;code class=&quot;highlighter-rouge&quot;&gt;featured-condition-size: 0&lt;/code&gt;, 这样只有一个标签时也会出现在首页了。&lt;/p&gt;

&lt;p&gt;相反，当你博客比较多，标签也很多时，这时你就需要改回 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; 甚至是 &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt; 了。&lt;/p&gt;

&lt;h1 id=&quot;自定义域名&quot;&gt;自定义域名&lt;/h1&gt;

&lt;p&gt;搭建好博客之后 你可能不想直接使用 &lt;a href=&quot;http://baiyingqiu.github.io&quot;&gt;baiyingqiu.github.io&lt;/a&gt; 这么长的博客域名吧, 想换成想 &lt;a href=&quot;http://qiubaiying.top&quot;&gt;qiubaiying.top&lt;/a&gt; 这样简短的域名。那我们开始吧！&lt;/p&gt;

&lt;h4 id=&quot;购买域名&quot;&gt;购买域名&lt;/h4&gt;
&lt;p&gt;首先，你必须购买一个自己的域名。&lt;/p&gt;

&lt;p&gt;我是在&lt;a href=&quot;https://wanwang.aliyun.com/domain/?spm=5176.8006371.1007.dnetcndomain.q1ys4x&quot;&gt;阿里云&lt;/a&gt;购买的域名&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-ef3844cab15e35ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用&lt;strong&gt;阿里云&lt;/strong&gt; app也可以注册域名，域名的价格根据后缀的不同和域名的长度而分，比如我这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;qiubaiying.top&lt;/code&gt; 的域名第一年才只要4元~&lt;/p&gt;

&lt;p&gt;域名尽量选择短一点比较好记住，注意，不能选择中文域名，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;张三.top&lt;/code&gt; ,GitHub Pages &lt;strong&gt;无法处理中文域名&lt;/strong&gt;，会导致你的域名在你的主页上使用。&lt;/p&gt;

&lt;p&gt;注册的步骤就不在介绍了&lt;/p&gt;

&lt;h4 id=&quot;解析域名&quot;&gt;解析域名&lt;/h4&gt;

&lt;p&gt;注册好域名后，需要将域名解析到你的博客上&lt;/p&gt;

&lt;p&gt;管理控制台 → 域名与网站（万网） → 域名&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-9a75bba50d1b14d7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择你注册好的域名，点击解析&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0968a8dd2045f4fd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加解析&lt;/p&gt;

&lt;p&gt;分别添加两个&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 记录类型,&lt;/p&gt;

&lt;p&gt;一个主机记录为 &lt;code class=&quot;highlighter-rouge&quot;&gt;www&lt;/code&gt;,代表可以解析 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.qiubaiying.top&lt;/code&gt;的域名&lt;/p&gt;

&lt;p&gt;另一个为 &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;, 代表 &lt;code class=&quot;highlighter-rouge&quot;&gt;qiubaiying.top&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;记录值就是我们博客的IP地址，是 GitHub Pagas 在美国的服务器的地址 &lt;code class=&quot;highlighter-rouge&quot;&gt;151.101.100.133&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0769a93bc487e9d8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以通过 &lt;a href=&quot;http://ip.chinaz.com/&quot;&gt;这个网站&lt;/a&gt;  或者直接在终端输入&lt;code class=&quot;highlighter-rouge&quot;&gt;ping 你的地址&lt;/code&gt;，查看博客的IP&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping qiubaiying.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;细心地你会发现所有人的博客都解析到 &lt;code class=&quot;highlighter-rouge&quot;&gt;151.101.100.133&lt;/code&gt; 这个IP。&lt;/p&gt;

&lt;p&gt;然后 GitHub Pages 再通过 CNAME记录 跳转到你的主页上。&lt;/p&gt;

&lt;h4 id=&quot;修改cname&quot;&gt;修改CNAME&lt;/h4&gt;

&lt;p&gt;最后一步，只需要修改 我们github仓库下的 &lt;strong&gt;CNAME&lt;/strong&gt; 文件。&lt;/p&gt;

&lt;p&gt;选择 &lt;strong&gt;CNAME&lt;/strong&gt; 文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-a422f3dab436dfb7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用的注册的域名进行替换,然后提交保存&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-6e613004fb410b44.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时，输入你自己的域名，就可以解析到你的主页了。&lt;/p&gt;

&lt;p&gt;大功告成！&lt;/p&gt;

&lt;h1 id=&quot;进阶&quot;&gt;进阶&lt;/h1&gt;

&lt;p&gt;若你对博客模板进行修改，你就要看看 Jekyll 的&lt;a href=&quot;http://jekyll.com.cn&quot;&gt;开发文档&lt;/a&gt;,是中文文档哦，对英语一般的朋友简直是福利啊（比如说我😀）。&lt;/p&gt;

&lt;p&gt;还要学习 &lt;strong&gt;Git&lt;/strong&gt; 和 &lt;strong&gt;GitHub&lt;/strong&gt; 的工作机制了及使用。&lt;/p&gt;

&lt;p&gt;你可以先看看这个&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/&quot;&gt;git教程&lt;/a&gt;，对git有个初步的了解后，那么相信你就能将自己图片传到GitHub仓库上，或者可以说掌握了 &lt;strong&gt;使用git管理自己的GitHub仓库&lt;/strong&gt; 的技能呢。&lt;/p&gt;

&lt;p&gt;对于轻车熟路的程序猿来说，这篇教程就算就结束了，因为下面的内容对于你们来说 so eazy~&lt;/p&gt;

&lt;p&gt;但相信很多小白都一脸懵逼，那我们继续👇。&lt;/p&gt;

&lt;h1 id=&quot;利用githhub-desktop管理github仓库&quot;&gt;利用GithHub Desktop管理GitHub仓库&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://desktop.github.com/&quot;&gt;GithHub Desktop&lt;/a&gt; 是 &lt;strong&gt;GithHub&lt;/strong&gt; 推出的一款管理GitHub仓库的桌面软件，换句话说就是将你在&lt;strong&gt;Github&lt;/strong&gt;上的文件同步到本地电脑上，并将修改后的文件同步到&lt;strong&gt;Github&lt;/strong&gt;远程仓库。&lt;/p&gt;

&lt;h4 id=&quot;下载&quot;&gt;下载&lt;/h4&gt;

&lt;p&gt;点击图片进入下载页面，选择对应的平台进行下载&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://desktop.github.com/&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-6022ba3938b3088e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面以&lt;strong&gt;Mac&lt;/strong&gt;平台为例：&lt;/p&gt;

&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;

&lt;p&gt;将下载好的文件解压，将这只小猫拖到应用程序文件夹中&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-8f8c27f4e5c72276.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就可以在&lt;strong&gt;Launchpad&lt;/strong&gt;找到这只小猫咪~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0f2da4717361459c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;登录&quot;&gt;登录&lt;/h4&gt;

&lt;p&gt;点开应用,会弹出&lt;strong&gt;登录&lt;/strong&gt;框，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-adb7d6824e471ef5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入你的&lt;strong&gt;GitHub&lt;/strong&gt;账号和密码进行登录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-2d7c407ebddbb44f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;登录后关闭窗口&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-93cdccc42024914b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后返回引导窗，一直按 &lt;strong&gt;Continue&lt;/strong&gt; 继续&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-450ccef6b1ab7b0a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-06b6e6792472ecae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还是&lt;strong&gt;Continue&lt;/strong&gt;~
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-681a6c455f6b512f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入主界面，先 &lt;strong&gt;右键Remve&lt;/strong&gt; 删除这个用户指导，贼烦~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-604f6f23b8fab6f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;克隆仓库&quot;&gt;克隆仓库&lt;/h4&gt;

&lt;p&gt;选择你的仓库克隆到本地&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-45ddcd27e2f858a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-625be1220fea36b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;管理仓库&quot;&gt;管理仓库&lt;/h4&gt;

&lt;p&gt;现在文件夹中打开&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-92c1616af56b501a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开后你会的发现文件结构和你在Github上的一模一样~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-bf3580ae1cd9a29e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你最先关心的可能是你的头像~在&lt;strong&gt;img&lt;/strong&gt;文件夹中把替换我的头像就好了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-c9421d64538c3ba6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不仅是图片，所有在Github上的的操作都可以进行。&lt;/p&gt;

&lt;h4 id=&quot;保存修改&quot;&gt;保存修改&lt;/h4&gt;

&lt;p&gt;当你对仓库文件夹的文件下进行修改、添加或删除时，都可以在 &lt;strong&gt;GitHub Desktop&lt;/strong&gt; 中看到&lt;/p&gt;

&lt;p&gt;例如我在 &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; 中添加了一张图片 &lt;code class=&quot;highlighter-rouge&quot;&gt;avatar-demo.png&lt;/code&gt; 添加了一张图片&lt;/p&gt;

&lt;p&gt;就可以在看到&lt;strong&gt;GitHub Desktop&lt;/strong&gt;显示了我的修改&lt;/p&gt;

&lt;p&gt;保存修改只要按 &lt;strong&gt;Commit to master&lt;/strong&gt;，然后可以写上你的修改说明&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-4bfbfec37cbb8eb6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;同步&quot;&gt;同步&lt;/h4&gt;

&lt;p&gt;将修改同步到 &lt;strong&gt;GitHub&lt;/strong&gt; 远程仓库上只需要一步：点击右上角的&lt;strong&gt;同步按钮&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-3c2ee8234a7f1832.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;完成&quot;&gt;完成&lt;/h4&gt;

&lt;p&gt;打开你的GitHub上的仓库，你就可以看到已经和本地同步了&lt;/p&gt;

&lt;p&gt;可以看到你提交的详情： &lt;code class=&quot;highlighter-rouge&quot;&gt;add img&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-293bdd4cbee0e9e3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样，你已经能轻松管理自己的博客了。&lt;/p&gt;

&lt;p&gt;想上传头像，背景，或者是删掉你不要的图片（我的头像😏）已经是 so eazy了吧~&lt;/p&gt;

&lt;h4 id=&quot;注意&quot;&gt;注意&lt;/h4&gt;
&lt;p&gt;你在 &lt;strong&gt;GitHub&lt;/strong&gt; 网站上进行 &lt;strong&gt;Commit&lt;/strong&gt; 操作后，需要在&lt;strong&gt;GitHub Desktop&lt;/strong&gt;上按一下 &lt;strong&gt;同步按键&lt;/strong&gt; 才能同步网站上的修改到你的本地。&lt;/p&gt;

&lt;h1 id=&quot;修改个人介绍&quot;&gt;修改个人介绍&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fme0poz7gqj30vq0l8whh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改个人介绍需要修改根目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;about.html&lt;/code&gt; 文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fme0rna33tj30bw0bntah.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看不懂 HTML 标签？没关系，对照着修改就好了~ 还有注意这个有中英介绍&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fme0sbvmmcj30zp0os7ap.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;常见问题&quot;&gt;常见问题&lt;/h1&gt;

&lt;p&gt;最近有很多人给我提问题，我这边总结一下&lt;/p&gt;

&lt;h4 id=&quot;配置文件修改后没有效果&quot;&gt;配置文件修改后没有效果&lt;/h4&gt;
&lt;p&gt;刷新几遍浏览器就好了~&lt;/p&gt;

&lt;p&gt;不行的话，先清除浏览器缓存再试试。&lt;/p&gt;

&lt;h4 id=&quot;404错误&quot;&gt;404错误&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;检查你的仓库名是否有按照要求填写&lt;/li&gt;
  &lt;li&gt;确定 &lt;strong&gt;Fork&lt;/strong&gt; 的是不是我的仓库~&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;修改cname文件域名还是不变&quot;&gt;修改CNAME文件，域名还是不变&lt;/h4&gt;

&lt;p&gt;清除浏览器缓存就OK~&lt;/p&gt;

&lt;h4 id=&quot;其他问题&quot;&gt;其他问题&lt;/h4&gt;

&lt;p&gt;直接在评论中提出来或私信我，我会一一替大家解决的😀&lt;/p&gt;

&lt;h1 id=&quot;其他&quot;&gt;其他&lt;/h1&gt;

&lt;p&gt;最近有人往我的远程仓库不停的 &lt;strong&gt;push&lt;/strong&gt;，一天连收几十封邮件！例如像这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-1347f2cc9a4a8dc8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;原因大多是直接Clone了我的仓库到本地，&lt;strong&gt;没有删除我的远程仓库地址&lt;/strong&gt;，添加完自己的仓库地址后，一口气推送到所有远程仓库（包括我的😂）~&lt;/p&gt;

&lt;p&gt;打扰了我的工作和生活~&lt;/p&gt;

&lt;p&gt;所以，&lt;strong&gt;请不要往我的仓库上推送分支&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;我发现一个问题是，很多人每次修改博客的内容都commit一次到远程仓库，然后再查看修改结果，这样效率非常低！&lt;/p&gt;

&lt;h4 id=&quot;来上车&quot;&gt;来，上车！&lt;/h4&gt;

&lt;h2 id=&quot;在本地调试博客&quot;&gt;在本地调试博客&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：下面的操作是在 &lt;strong&gt;Mac&lt;/strong&gt; 终端进行的。
&lt;strong&gt;Windows&lt;/strong&gt; 环境下的配置请参考 &lt;a href=&quot;http://www.jianshu.com/u/a13e7484dc21&quot;&gt;@梦幻之云&lt;/a&gt; 提供的 &lt;a href=&quot;https://agcaiyun.cn/2017/09/10/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有心的同学在 &lt;a href=&quot;http://jekyllcn.com/&quot;&gt;jekyll官网&lt;/a&gt; 就会发现 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; 的 提供的实例代码。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ gem install jekyll bundler
~ $ jekyll new my-awesome-site
~ $ cd my-awesome-site
~/my-awesome-site $ bundle install
~/my-awesome-site $ bundle exec jekyll serve
# =&amp;gt; 打开浏览器 http://localhost:4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段命令创建了一个默认的 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekll&lt;/code&gt; 网站，然后在本机的 4000 窗口展示。聪明的你应该发现怎么做了吧~&lt;/p&gt;

&lt;p&gt;安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll bundler&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll
$ gem install jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进入你的 &lt;strong&gt;Blog 所在目录&lt;/strong&gt;，然后创建本地服务器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll s

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后会显示&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Auto-regeneration: enabled for &#39;/Users/baiying/Blog&#39;
Configuration file: /Users/baiying/Blog/_config.yml
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你就可以在 &lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt; 看到你的博客，你对本地博客的修改都会在这个地址进行显示，这大大提高了对博客的配置效率。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+c&lt;/code&gt;就可以停止 &lt;strong&gt;serve&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;star&quot;&gt;Star&lt;/h1&gt;

&lt;p&gt;若本教程顺利帮你搭建了自己的个人博客，请不要 &lt;strong&gt;害羞&lt;/strong&gt;，给我的 &lt;a href=&quot;https://github.com/qiubaiying/qiubaiying.github.io&quot;&gt;github仓库&lt;/a&gt; 点个 &lt;strong&gt;star&lt;/strong&gt; 吧！&lt;/p&gt;

&lt;p&gt;因为最近发现 Fork 将近破百，加上直接 Clone 仓库的，保守估计已经帮助上百人成功的搭建了自己的博客，&lt;del&gt;可是 Star 却仅仅只有 &lt;strong&gt;12&lt;/strong&gt;！可能还是做的不够好吧！&lt;/del&gt;现在已经破百了，感谢大家的Star！&lt;/p&gt;

&lt;h3 id=&quot;别无他求点个-star-吧&quot;&gt;&lt;strong&gt;别无他求，点个 &lt;a href=&quot;https://github.com/qiubaiying/qiubaiying.github.io&quot;&gt;Star&lt;/a&gt; 吧&lt;/strong&gt;！&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-768a38ee9fb0df28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;心满意足！&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;补充&quot;&gt;补充&lt;/h1&gt;

&lt;h4 id=&quot;修改网站的-icon&quot;&gt;修改网站的 &lt;strong&gt;icon&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1flgh6k23ppj30ad00uq2t.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;要修改如图所示的网站 &lt;strong&gt;icon&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;在博客 &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; 目录下找到并替换 &lt;code class=&quot;highlighter-rouge&quot;&gt;favicon.ico&lt;/code&gt; 这个图标即可，图标尺寸为&lt;code class=&quot;highlighter-rouge&quot;&gt;32x32&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1flghahch1oj30gu09y419.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;修改主页的座右铭&quot;&gt;修改主页的座右铭&lt;/h4&gt;

&lt;p&gt;最近有不少小伙伴私信我：&lt;strong&gt;如何修改主页的座右铭？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;就是这个：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-31dc0068f256aca3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很简单，找到博客目录下的 &lt;strong&gt;index.html&lt;/strong&gt; 文件，修改这句话就可以了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-9e4785654523bf07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;如何在博客文章中上插入图片&quot;&gt;如何在博客文章中上插入图片&lt;/h4&gt;

&lt;p&gt;博客的文章用的是 MarkDown 格式，如果没用过 MarkDown 真的 强烈推荐 &lt;a href=&quot;http://sspai.com/25137&quot;&gt;花半个小时学习一下&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;MarkDown 中添加图片的形式是 :&lt;code class=&quot;highlighter-rouge&quot;&gt;![](图片的URL)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;![MarkDown示例图片](http://upload-images.jianshu.io/upload_images/2178672-eb2effd6b942a500.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)&lt;/code&gt;就会显示下面这张图片&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-98965f66db8f5856.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;MarkDown示例图片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://ws3.sinaimg.cn/large/006tNc79gy1fj9xhjzobbj30yg0my75z.jpg&lt;/code&gt;就是这张图片的URL，我们可以在浏览器输入这个URL找到或下载这张图片。&lt;/p&gt;

&lt;p&gt;所以，要在 MacDown 中插入图片，这张图片就需要上传到图床（网上），然后在引
用这张图片的URL。&lt;/p&gt;

&lt;h5 id=&quot;将图片上传到图床&quot;&gt;将图片上传到图床&lt;/h5&gt;

&lt;p&gt;Mac 上的图床神器：iPic&lt;/p&gt;

&lt;p&gt;直接在App Store上下载，谁用谁知道！&lt;/p&gt;

&lt;p&gt;使用方法很简单，直接拖动图片到 P 图标上，或者选中图片按快捷键 &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+U&lt;/code&gt;，就能请示上传。&lt;/p&gt;

&lt;p&gt;上传成功就能直接粘贴图片的URL。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-7399aeaced6f1e29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;iPic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用 iPic 上传图片后，获取URL插入文章中就可以了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-4be76fb02708de5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;iPic上传图片&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;推荐几个好用软件&quot;&gt;推荐几个好用软件&lt;/h4&gt;

&lt;h5 id=&quot;markdown编辑器&quot;&gt;MarkDown编辑器&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://macdown.uranusjr.com/&quot;&gt;MacDown&lt;/a&gt;：可能是Mac上最好的MacDown编辑器了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-2226239a63278302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;图片压缩工具&quot;&gt;图片压缩工具&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://imageoptim.com/&quot;&gt;ImageOptim&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对于我们的博客来说，图片越大，加载速度越慢。&lt;/p&gt;

&lt;p&gt;不信你用手机打开你的博客试试~&lt;/p&gt;

&lt;p&gt;所以有必要对我们上传到博客网站中的图片：指的是你的头像，首页背景图片，文章背景图片等。对于博客文章中插入的图片，其实也可以压缩了再上传。&lt;/p&gt;

&lt;p&gt;对博客中的所有图片进行压缩：&lt;/p&gt;

&lt;p&gt;看看压缩结果，最高的一张压缩了78.7%，这简直是太可怕了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-0f8e643fa1da8674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ImageOptim压缩图片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好了，现在个人博客的加载速度估计要起飞了~&lt;/p&gt;

&lt;h1 id=&quot;最后要说个事情&quot;&gt;最后要说个事情&lt;/h1&gt;

&lt;p&gt;我在博客中的文章，你们可以保留，让更多需要帮助人的看到，当然也可以删除。&lt;/p&gt;

&lt;p&gt;但是，我发现居然有人把文章的作者改成了自己，然后当成自己的文章放在自己的博客上，这就令人感到气愤了。&lt;/p&gt;

&lt;p&gt;比如说向我请教问题的这位：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-ed45ebafec7f5d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我在博客中的每篇文章都是我一字一句敲出来的，转载的文章我也注明了出处，表示对原作者的尊重。同时也希望大家都能尊重我的付出。&lt;/p&gt;

&lt;p&gt;谢谢~&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://20083017.github.io/2017/02/06/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
        <guid isPermaLink="true">http://20083017.github.io/2017/02/06/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
        
        <category>Blog</category>
        
        
      </item>
    
      <item>
        <title>Hello 2017</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“🙉🙉🙉 ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;BY 的 Blog 就这么开通了。&lt;/p&gt;

&lt;p&gt;本来打算在年前完成 Blog 的搭建，不曾料想踩了很多坑。。。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2017 年，BY Blog 总算是搭建好了。&lt;/p&gt;

&lt;p&gt;最开始写博客是在&lt;a href=&quot;www.jianshu.com&quot;&gt;简书&lt;/a&gt;这个平台上，简书确实不错，支持markdown在线编辑。&lt;/p&gt;

&lt;p&gt;在一次偶然间，听到我的好基友 &lt;strong&gt;阳阳&lt;/strong&gt; 想搭建个人主页，觉得作为一个程序员，是应该倒腾倒腾自己的Blog，于是乎就开始了撸起袖子干了。&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;接下来说说搭建这个博客的技术细节。&lt;/p&gt;

&lt;p&gt;正好之前就有关注过 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案，非常轻松时尚。&lt;/p&gt;

&lt;p&gt;其优点非常明显：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 带来的优雅写作体验&lt;/li&gt;
  &lt;li&gt;非常熟悉的 Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
    &lt;ul&gt;
      &lt;li&gt;如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jekyll 的自定制非常容易，基本就是个模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;主题我直接 Downlosd 了 &lt;a href=&quot;https://huangxuan.me/&quot;&gt;Hux的博客主题&lt;/a&gt; 的进行修改，简单粗暴，不过遇到了很多坑😂，好在都填完了。。。&lt;/p&gt;

&lt;p&gt;本地调试环境需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;，结果 rubygem 的源居然被墙了，&lt;del&gt;后来手动改成了我大淘宝的镜像源才成功&lt;/del&gt;，淘宝的源已经&lt;a href=&quot;https://gems.ruby-china.org/&quot;&gt;停止维护&lt;/a&gt;，换成了OSChina的源 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://gems.ruby-china.org/&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;最后，感谢 Hux 提供的的 &lt;a href=&quot;https://github.com/Huxpro/huxpro.github.io&quot;&gt;Blog 主题&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果你恰好逛到了这里，希望你也能喜欢这个博客主题，感兴趣的话可以自己动手搭建一个。&lt;/p&gt;

&lt;p&gt;—— BY 后记于 2017.2&lt;/p&gt;

</description>
        <pubDate>Sat, 04 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://20083017.github.io/2017/02/04/Hello-2017/</link>
        <guid isPermaLink="true">http://20083017.github.io/2017/02/04/Hello-2017/</guid>
        
        <category>生活</category>
        
        
      </item>
    
      <item>
        <title>定时器 你真的会使用吗？</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;定时器的使用是软件开发基础技能，用于延时执行或重复执行某些方法。&lt;/p&gt;

&lt;p&gt;我相信大部分人接触iOS的定时器都是从这段代码开始的:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scheduledTimerWithTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是你真的会用吗？&lt;/p&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;h2 id=&quot;ios定时器&quot;&gt;iOS定时器&lt;/h2&gt;

&lt;p&gt;首先来介绍iOS中的定时器&lt;/p&gt;

&lt;p&gt;iOS中的定时器大致分为这几类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;NSTimer&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CADisplayLink&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GCD定时器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nstimer&quot;&gt;NSTimer&lt;/h3&gt;

&lt;h4 id=&quot;使用方法&quot;&gt;使用方法&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;NSTime&lt;/strong&gt;定时器是我们比较常使用的定时器，比较常使用的方法有两种：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timerWithTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ti&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aTarget&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yesOrNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scheduledTimerWithTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ti&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aTarget&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yesOrNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这两种方法都是创建一个定时器，区别是用&lt;code class=&quot;highlighter-rouge&quot;&gt;timerWithTimeInterval:&lt;/code&gt;方法创建的定时器需要手动加入RunLoop中。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 创建NSTimer对象
NSTimer *timer = [NSTimer timerWithTimeInterval:3 target:self selector:@selector(timerAction) userInfo:nil repeats:YES];
// 加入RunLoop中
[[NSRunLoop mainRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要&lt;strong&gt;注意&lt;/strong&gt;的是： &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt; 滑动时执行的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITrackingRunLoopMode&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDefaultRunLoopMode&lt;/code&gt;被挂起，会导致定时器失效，等恢复为&lt;strong&gt;滑动结束&lt;/strong&gt;时才恢复定时器。其原因可以查看我这篇&lt;a href=&quot;http://www.jianshu.com/p/c4f552ceda63&quot;&gt;《Objective-C RunLoop 详解》&lt;/a&gt;中的 “RunLoop 的 Mode“章节，有详细的介绍。&lt;/p&gt;

&lt;p&gt;举个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)startTimer{
    NSTimer *UIScrollView = [NSTimer timerWithTimeInterval:0.5 target:self selector:@selector(action:) userInfo:nil repeats:YES];
    [[NSRunLoop mainRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
}

- (void)action:(NSTimer *)sender {
    static int i = 0;
    NSLog(@&quot;NSTimer: %d&quot;,i);
    i++;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt;添加到&lt;strong&gt;NSDefaultRunLoopMode&lt;/strong&gt;中，没0.5秒打印一次，然后滑动&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;打印台输出：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-9de097ecc618b498.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出在滑动&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;时，定时器被暂停了。&lt;/p&gt;

&lt;p&gt;所以如果需要定时器在 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt; 拖动时也不影响的话，有两种解决方法&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;timer&lt;/strong&gt;分别添加到 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITrackingRunLoopMode&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDefaultRunLoopMode&lt;/code&gt;中&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSRunLoop&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainRunLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDefaultRunLoopMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSRunLoop&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainRunLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UITrackingRunLoopMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;直接将&lt;strong&gt;timer&lt;/strong&gt;添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoopCommonModes&lt;/code&gt; 中：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSRunLoop&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainRunLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSRunLoopCommonModes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但并不是都&lt;strong&gt;timer&lt;/strong&gt;所有的需要在滑动&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;时继续执行，比如使用&lt;strong&gt;NSTimer&lt;/strong&gt;完成的帧动画，滑动&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;时就可以停止帧动画，保证滑动的流程性。&lt;/p&gt;

&lt;p&gt;若没有特殊要求的话，一般使用第二种方法创建完&lt;strong&gt;timer&lt;/strong&gt;，会自动添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDefaultRunLoopMode&lt;/code&gt;中去执行，也是平时最常用的方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSTimer *timer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(action:) userInfo:nil repeats:YES];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;参数：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TimeInterval&lt;/code&gt;：延时时间&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;:目标对象，一般就是&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;本身&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;:执行方法&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;:传入信息&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;repeats&lt;/code&gt;:是否重复执行&lt;/p&gt;

&lt;p&gt;以上创建的定时器，若&lt;code class=&quot;highlighter-rouge&quot;&gt;repeats&lt;/code&gt;参数设为&lt;code class=&quot;highlighter-rouge&quot;&gt;NO&lt;/code&gt;，执行一次后就会被释放掉;&lt;/p&gt;

&lt;p&gt;若&lt;code class=&quot;highlighter-rouge&quot;&gt;repeats&lt;/code&gt;参数设为&lt;code class=&quot;highlighter-rouge&quot;&gt;YES&lt;/code&gt;重复执行时，必须手动关闭，否则定时器不会释放(停止）。&lt;/p&gt;

&lt;p&gt;释放方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 停止定时器
[timer invalidate];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实际开发中，我们会将&lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt;对象设置为属性，这样方便释放。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iOS10.0&lt;/strong&gt; 推出了两个新的API，与上面的方法相比，&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;换成Block回调以、减少传入的参数(那几个参数真是鸡肋)。不过开发中一般需要适配低版本，还是尽量使用上面的方法吧。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^)(NSTimer *timer))block API_AVAILABLE(macosx(10.12), ios(10.0), watchos(3.0), tvos(10.0));

+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^)(NSTimer *timer))block API_AVAILABLE(macosx(10.12), ios(10.0), watchos(3.0), tvos(10.0));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;###特点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;必须加入Runloop&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;上面不管使用哪种方法，实际最后都会加入RunLoop中执行，区别就在于是否手动加入而已。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;存在延迟&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;不管是一次性的还是周期性的timer的实际触发事件的时间，都会与所加入的RunLoop和RunLoop Mode有关，如果此RunLoop正在执行一个连续性的运算，timer就会被延时出发。重复性的timer遇到这种情况，如果延迟超过了一个周期，则会在延时结束后立刻执行，并按照之前指定的周期继续执行，这个延迟时间大概为50-100毫秒.&lt;/p&gt;

    &lt;p&gt;所以NSTimer不是绝对准确的,而且中间耗时或阻塞错过下一个点,那么下一个点就pass过去了.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;UIScrollView滑动会暂停计时&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDefaultRunLoopMode&lt;/code&gt;的 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;滑动时会暂停，若不想被&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;滑动影响，需要将 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; 添加再到 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITrackingRunLoopMode&lt;/code&gt; 或 直接添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoopCommonModes&lt;/code&gt; 中&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##CADisplayLink&lt;/p&gt;

&lt;p&gt;CADisplayLink官方介绍：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A CADisplayLink object is a timer object that allows your application to synchronize its drawing to the refresh rate of the display&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;CADisplayLink&lt;/strong&gt;对象是一个和屏幕刷新率同步的定时器对象。每当屏幕显示内容刷新结束的时候，runloop就会向CADisplayLink指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;发送一次指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;消息， CADisplayLink类对应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt; 就会被调用一次。&lt;/p&gt;

&lt;p&gt;从原理上可以看出，CADisplayLink适合做界面的不停重绘，比如视频播放的时候需要不停地获取下一帧用于界面渲染，或者做动画。
###使用方法&lt;/p&gt;

&lt;p&gt;创建：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CADisplayLink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayLink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CADisplayLink&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;displayLinkWithTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handleDisplayLink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;// 每隔1帧调用一次
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frameInterval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayLink&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addToRunLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSRunLoop&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;currentRunLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDefaultRunLoopMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;释放方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[self.displayLink invalidate];  

self.displayLink = nil;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;当把&lt;strong&gt;CADisplayLink&lt;/strong&gt;对象添加到runloop中后，&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;就能被周期性调用，类似于重复的NSTimer被启动了；执行&lt;code class=&quot;highlighter-rouge&quot;&gt;invalidate&lt;/code&gt;操作时，CADisplayLink对象就会从runloop中移除，&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;调用也随即停止，类似于NSTimer的&lt;code class=&quot;highlighter-rouge&quot;&gt;invalidate&lt;/code&gt;方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CADisplayLink&lt;/strong&gt;中有两个重要的属性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;frameInterval&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;NSInteger类型的值，用来设置间隔多少帧调用一次&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;方法，默认值是1，即每帧都调用一次。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;duration&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CFTimeInterval&lt;/code&gt;值为&lt;code class=&quot;highlighter-rouge&quot;&gt;readOnly&lt;/code&gt;，表示两次屏幕刷新之间的时间间隔。需要注意的是，该属性在&lt;code class=&quot;highlighter-rouge&quot;&gt;targe&lt;/code&gt;t的&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;被首次调用以后才会被赋值。&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;的调用间隔时间计算方式是：&lt;strong&gt;调用间隔时间 = duration × frameInterval&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###特点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;刷新频率固定&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;正常情况iOS设备的屏幕刷新频率是固定&lt;strong&gt;60Hz&lt;/strong&gt;,如果CPU过于繁忙，无法保证屏幕60次/秒的刷新率，就会导致跳过若干次调用回调方法的机会，跳过次数取决CPU的忙碌程度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;屏幕刷新时调用&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。但如果调用的方法比较耗时，超过了屏幕刷新周期，就会导致跳过若干次回调调用机会&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;适合做界面渲染&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;CADisplayLink可以确保系统渲染每一帧的时候我们的方法都被调用，从而保证了动画的流畅性。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##GCD定时器&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GCD定时器&lt;/strong&gt;和NSTimer是不一样的，NSTimer受RunLoop影响，但是GCD的定时器不受影响，因为通过源码可知RunLoop也是基于GCD的实现的，所以GCD定时器有非常高的精度。关于GCD的使用可一看看&lt;a href=&quot;http://www.cnblogs.com/pure/archive/2013/03/31/2977420.html&quot;&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;###使用方法
创建GCD定时器定时器的方法稍微比较复杂，看下面的代码：&lt;/p&gt;

&lt;p&gt;####单次的延时调用
NSObject中的&lt;code class=&quot;highlighter-rouge&quot;&gt;performSelector:withObject:afterDelay:&lt;/code&gt;以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;performSelector:withObject:afterDelay:inModes:&lt;/code&gt; 这两个方法在调用的时候会设置当前 runloop 中 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; ，前者设置的 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDefaultRunLoopMode&lt;/code&gt; 运行，后者则可以指定 &lt;strong&gt;NSRunLoop&lt;/strong&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;mode&lt;/code&gt; 来执行。我们上面介绍过 runloop 中 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITrackingRunLoopMode&lt;/code&gt; 被挂起，就导致了代码就会一直等待 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; 的调度,解决办法在上面也有说明。&lt;/p&gt;

&lt;p&gt;不过我们可以用另一套方案来解决这个问题，就是使用GCD中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_after&lt;/code&gt; 来实现单次的延时调用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;double delayInSeconds = 2.0;
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
        [self someMethod];
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;####循环调用&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 创建GCD定时器
dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);

dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);

dispatch_source_set_timer(_timer, dispatch_walltime(NULL, 0), 1.0 * NSEC_PER_SEC, 0); //每秒执行

// 事件回调
dispatch_source_set_event_handler(_timer, ^{
        
    dispatch_async(dispatch_get_main_queue(), ^{
        // 在主线程中实现需要的功能
        
	}
}
    
});

// 开启定时器
dispatch_resume(_timer);

// 挂起定时器（dispatch_suspend 之后的 Timer，是不能被释放的！会引起崩溃）
dispatch_suspend(_timer);

// 关闭定时器
dispatch_source_cancel(_timer);
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面代码中要注意的是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_set_event_handler()&lt;/code&gt;中的任务实在子线程中执行的，若需要回到主线程，要调用&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_async(dispatch_get_main_queue(), ^{}&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_set_timer&lt;/code&gt; 中第二个参数，当我们使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_time&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;DISPATCH_TIME_NOW&lt;/code&gt; 时，系统会使用默认时钟来进行计时。然而当系统休眠的时候，默认时钟是不走的，也就会导致计时器停止。使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_walltime &lt;/code&gt; 可以让计时器按照真实时间间隔进行计时.&lt;/li&gt;
      &lt;li&gt;第三个参数， ` 1.0 * NSEC_PER_SEC` 为每秒执行一次，对应的还有毫秒，分秒，纳秒可以选择.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_set_event_handler&lt;/code&gt; 这个函数在执行完之后，block 会立马执行一遍，后面隔一定时间间隔再执行一次。而 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; 第一次执行是到计时器触发之后。这也是和 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; 之间的一个显著区别。&lt;/li&gt;
  &lt;li&gt;挂起（暂停）定时器, &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_suspend&lt;/code&gt; 之后的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Timer&lt;/code&gt;，不能被释放的,会引起崩溃.&lt;/li&gt;
  &lt;li&gt;创建的&lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt;一定要有&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_suspend(_timer)&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_cancel(_timer)&lt;/code&gt;这两句话来指定出口，否则定时器将不执行，若我们想无限循环可将 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_cancel(_timer)&lt;/code&gt; 写在一句永不执行的&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;判断语句中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##使用场景&lt;/p&gt;

&lt;p&gt;介绍完iOS中的各种定时器，接下来我们来说说这几种定时器在开发中的几种用法。
###短信重发倒计时&lt;/p&gt;

&lt;p&gt;短信倒计时使我们登录注册常用的功能，一般设置为60s，实现方法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 计时时间
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** 开启倒计时 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startCountdown&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;_timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// GCD定时器
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_global_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;dispatch_source_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_source_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_SOURCE_TYPE_TIMER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;dispatch_source_set_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_walltime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//每秒执行
&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;dispatch_source_set_event_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 倒计时结束
&lt;/span&gt;            
            &lt;span class=&quot;c1&quot;&gt;// 关闭定时器
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;dispatch_source_cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                
                &lt;span class=&quot;c1&quot;&gt;//设置界面的按钮显示 根据自己需求设置
&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendMsgBtn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;发送&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlStateNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                
                &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendMsgBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 倒计时中
&lt;/span&gt;            
            &lt;span class=&quot;c1&quot;&gt;// 显示倒计时结果
&lt;/span&gt;            
            &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;重发(%.2d)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                
                &lt;span class=&quot;c1&quot;&gt;//设置界面的按钮显示 根据自己需求设置
&lt;/span&gt;                
                &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendMsgBtn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlStateNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                
                &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendMsgBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 开启定时器
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;dispatch_resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在上面代码中，我们设置了一个60s循环倒计时，当我们向服务器获取短信验证码成功时 调用该方法开始倒计时。每秒刷新按钮的倒计时数，倒计时结束时再将按钮 &lt;code class=&quot;highlighter-rouge&quot;&gt;Title&lt;/code&gt; 恢复为“发送”.&lt;/p&gt;

&lt;p&gt;有一点需要注意的是，按钮的样式要设置为 &lt;strong&gt;UIButtonTypeCustom&lt;/strong&gt;,否则会出现刷新 &lt;code class=&quot;highlighter-rouge&quot;&gt;Title&lt;/code&gt; 时闪烁.&lt;/p&gt;

&lt;p&gt;我们可以把这个方法封装一下，方便调用，否则在控制器中写这么一大段代码确实也不优雅。&lt;/p&gt;

&lt;p&gt;效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-3d4d1353bcc36026.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;代码链接&quot;&gt;&lt;a href=&quot;https://github.com/qiubaiying/BYTimer&quot;&gt;代码链接&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;###每个几分钟向服务器发送数据&lt;/p&gt;

&lt;p&gt;在有定位服务的APP中，我们需要每个一段时间将定位数据发送到服务器，比如每5s定位一次每隔5分钟将再统一将数据发送服务器，这样会处理比较省电。
一般程序进入后台时，定时器会停止，但是在定位APP中，需要持续进行定位，APP在后台时依旧可以运行，所以在后台定时器也是可以运行的。&lt;/p&gt;

&lt;p&gt;注：关于iOS后台常驻,可以查看&lt;a href=&quot;http://waitingyuan.blog.163.com/blog/static/2155781652014111133150534/&quot;&gt;这篇博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在使用GCD定时的时候发现GCD定时器也可以在后代运行，创建方法同上面的短信倒计时.&lt;/p&gt;

&lt;p&gt;这里我们使用&lt;strong&gt;NSTimer&lt;/strong&gt;来创建一个每个5分钟执行一次的定时器.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimerBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BYTimer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startTimerWithBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimerBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;timerBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;BYTimer.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BYTimer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timerBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BYTimer&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startTimerWithBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimerBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;timerBlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	 &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timerWithTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_timerAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	 
    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSRunLoop&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainRunLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSRunLoopCommonModes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_timerBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timerBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_timerAction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopTimer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invalidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该接口的实现很简单，就是 &lt;strong&gt;NSTimer&lt;/strong&gt; 创建了一个300s执行一次的定时器，但是要注意定时器需要加入&lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoopCommonModes&lt;/code&gt;中。&lt;/p&gt;

&lt;p&gt;要使定时器在后台能运行，app 就需要在 &lt;a href=&quot;http://waitingyuan.blog.163.com/blog/static/2155781652014111133150534/&quot;&gt;后台常驻&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;结语&quot;&gt;结语&lt;/h1&gt;

&lt;p&gt;最后总结一下：&lt;/p&gt;

&lt;p&gt;NSTimer 使用简单方便，但是应用条件有限。&lt;/p&gt;

&lt;p&gt;CADisplayLink 刷新频率与屏幕帧数相同，用于绘制动画。具体使用可看我封装好的一个 &lt;a href=&quot;https://github.com/qiubaiying/WaterRippleView&quot;&gt;水波纹动画&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;GCD定时器 精度高，可控性强，使用稍复杂。&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://20083017.github.io/2016/12/13/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%90%97/</link>
        <guid isPermaLink="true">http://20083017.github.io/2016/12/13/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%90%97/</guid>
        
        <category>iOS</category>
        
        <category>定时器</category>
        
        
      </item>
    
  </channel>
</rss>
